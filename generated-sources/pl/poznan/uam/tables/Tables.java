/*
 * This file is generated by jOOQ.
*/
package pl.poznan.uam.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.poznan.uam.Indexes;
import pl.poznan.uam.Keys;
import pl.poznan.uam.Public;
import pl.poznan.uam.tables.records.TablesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tables extends TableImpl<TablesRecord> {

    private static final long serialVersionUID = 20127598;

    /**
     * The reference instance of <code>public.tables</code>
     */
    public static final Tables TABLES = new Tables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TablesRecord> getRecordType() {
        return TablesRecord.class;
    }

    /**
     * The column <code>public.tables.id</code>.
     */
    public final TableField<TablesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('tables_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.tables.height</code>.
     */
    public final TableField<TablesRecord, Integer> HEIGHT = createField("height", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tables.width</code>.
     */
    public final TableField<TablesRecord, Integer> WIDTH = createField("width", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tables.lenght</code>.
     */
    public final TableField<TablesRecord, Integer> LENGHT = createField("lenght", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tables.shape</code>.
     */
    public final TableField<TablesRecord, String> SHAPE = createField("shape", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.tables.name</code>.
     */
    public final TableField<TablesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(65).nullable(false), this, "");

    /**
     * Create a <code>public.tables</code> table reference
     */
    public Tables() {
        this(DSL.name("tables"), null);
    }

    /**
     * Create an aliased <code>public.tables</code> table reference
     */
    public Tables(String alias) {
        this(DSL.name(alias), TABLES);
    }

    /**
     * Create an aliased <code>public.tables</code> table reference
     */
    public Tables(Name alias) {
        this(alias, TABLES);
    }

    private Tables(Name alias, Table<TablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tables(Name alias, Table<TablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TABLES_ID_UINDEX, Indexes.TABLES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TablesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TABLES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TablesRecord> getPrimaryKey() {
        return Keys.TABLES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TablesRecord>> getKeys() {
        return Arrays.<UniqueKey<TablesRecord>>asList(Keys.TABLES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tables as(String alias) {
        return new Tables(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tables as(Name alias) {
        return new Tables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tables rename(String name) {
        return new Tables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tables rename(Name name) {
        return new Tables(name, null);
    }
}
